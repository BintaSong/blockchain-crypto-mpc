// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yak.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "yak.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mpc {
namespace yak {

namespace {

const ::google::protobuf::Descriptor* YakMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YakMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_yak_2eproto() {
  protobuf_AddDesc_yak_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "yak.proto");
  GOOGLE_CHECK(file != NULL);
  YakMessage_descriptor_ = file->message_type(0);
  static const int YakMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YakMessage, e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YakMessage, zkp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YakMessage, pk_),
  };
  YakMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      YakMessage_descriptor_,
      YakMessage::default_instance_,
      YakMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(YakMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YakMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YakMessage, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_yak_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      YakMessage_descriptor_, &YakMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_yak_2eproto() {
  delete YakMessage::default_instance_;
  delete YakMessage_reflection_;
}

void protobuf_AddDesc_yak_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tyak.proto\022\007mpc.yak\"0\n\nYakMessage\022\t\n\001e\030"
    "\001 \001(\014\022\013\n\003zkp\030\002 \001(\014\022\n\n\002pk\030\003 \001(\0142;\n\006YakRPC"
    "\0221\n\003AKE\022\023.mpc.yak.YakMessage\032\023.mpc.yak.Y"
    "akMessage\"\000b\006proto3", 139);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "yak.proto", &protobuf_RegisterTypes);
  YakMessage::default_instance_ = new YakMessage();
  YakMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_yak_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_yak_2eproto {
  StaticDescriptorInitializer_yak_2eproto() {
    protobuf_AddDesc_yak_2eproto();
  }
} static_descriptor_initializer_yak_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YakMessage::kEFieldNumber;
const int YakMessage::kZkpFieldNumber;
const int YakMessage::kPkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YakMessage::YakMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpc.yak.YakMessage)
}

void YakMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

YakMessage::YakMessage(const YakMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpc.yak.YakMessage)
}

void YakMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  e_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zkp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

YakMessage::~YakMessage() {
  // @@protoc_insertion_point(destructor:mpc.yak.YakMessage)
  SharedDtor();
}

void YakMessage::SharedDtor() {
  e_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zkp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pk_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void YakMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YakMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YakMessage_descriptor_;
}

const YakMessage& YakMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yak_2eproto();
  return *default_instance_;
}

YakMessage* YakMessage::default_instance_ = NULL;

YakMessage* YakMessage::New(::google::protobuf::Arena* arena) const {
  YakMessage* n = new YakMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YakMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mpc.yak.YakMessage)
  e_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zkp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YakMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpc.yak.YakMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes e = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_e()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_zkp;
        break;
      }

      // optional bytes zkp = 2;
      case 2: {
        if (tag == 18) {
         parse_zkp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_zkp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pk;
        break;
      }

      // optional bytes pk = 3;
      case 3: {
        if (tag == 26) {
         parse_pk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pk()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpc.yak.YakMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpc.yak.YakMessage)
  return false;
#undef DO_
}

void YakMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpc.yak.YakMessage)
  // optional bytes e = 1;
  if (this->e().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->e(), output);
  }

  // optional bytes zkp = 2;
  if (this->zkp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->zkp(), output);
  }

  // optional bytes pk = 3;
  if (this->pk().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pk(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpc.yak.YakMessage)
}

::google::protobuf::uint8* YakMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpc.yak.YakMessage)
  // optional bytes e = 1;
  if (this->e().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->e(), target);
  }

  // optional bytes zkp = 2;
  if (this->zkp().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->zkp(), target);
  }

  // optional bytes pk = 3;
  if (this->pk().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pk(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpc.yak.YakMessage)
  return target;
}

int YakMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpc.yak.YakMessage)
  int total_size = 0;

  // optional bytes e = 1;
  if (this->e().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->e());
  }

  // optional bytes zkp = 2;
  if (this->zkp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->zkp());
  }

  // optional bytes pk = 3;
  if (this->pk().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pk());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YakMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpc.yak.YakMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const YakMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const YakMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpc.yak.YakMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpc.yak.YakMessage)
    MergeFrom(*source);
  }
}

void YakMessage::MergeFrom(const YakMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpc.yak.YakMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.e().size() > 0) {

    e_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.e_);
  }
  if (from.zkp().size() > 0) {

    zkp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zkp_);
  }
  if (from.pk().size() > 0) {

    pk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pk_);
  }
}

void YakMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpc.yak.YakMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YakMessage::CopyFrom(const YakMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpc.yak.YakMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YakMessage::IsInitialized() const {

  return true;
}

void YakMessage::Swap(YakMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YakMessage::InternalSwap(YakMessage* other) {
  e_.Swap(&other->e_);
  zkp_.Swap(&other->zkp_);
  pk_.Swap(&other->pk_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YakMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YakMessage_descriptor_;
  metadata.reflection = YakMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YakMessage

// optional bytes e = 1;
void YakMessage::clear_e() {
  e_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& YakMessage::e() const {
  // @@protoc_insertion_point(field_get:mpc.yak.YakMessage.e)
  return e_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YakMessage::set_e(const ::std::string& value) {
  
  e_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpc.yak.YakMessage.e)
}
 void YakMessage::set_e(const char* value) {
  
  e_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpc.yak.YakMessage.e)
}
 void YakMessage::set_e(const void* value, size_t size) {
  
  e_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpc.yak.YakMessage.e)
}
 ::std::string* YakMessage::mutable_e() {
  
  // @@protoc_insertion_point(field_mutable:mpc.yak.YakMessage.e)
  return e_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YakMessage::release_e() {
  // @@protoc_insertion_point(field_release:mpc.yak.YakMessage.e)
  
  return e_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YakMessage::set_allocated_e(::std::string* e) {
  if (e != NULL) {
    
  } else {
    
  }
  e_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), e);
  // @@protoc_insertion_point(field_set_allocated:mpc.yak.YakMessage.e)
}

// optional bytes zkp = 2;
void YakMessage::clear_zkp() {
  zkp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& YakMessage::zkp() const {
  // @@protoc_insertion_point(field_get:mpc.yak.YakMessage.zkp)
  return zkp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YakMessage::set_zkp(const ::std::string& value) {
  
  zkp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpc.yak.YakMessage.zkp)
}
 void YakMessage::set_zkp(const char* value) {
  
  zkp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpc.yak.YakMessage.zkp)
}
 void YakMessage::set_zkp(const void* value, size_t size) {
  
  zkp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpc.yak.YakMessage.zkp)
}
 ::std::string* YakMessage::mutable_zkp() {
  
  // @@protoc_insertion_point(field_mutable:mpc.yak.YakMessage.zkp)
  return zkp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YakMessage::release_zkp() {
  // @@protoc_insertion_point(field_release:mpc.yak.YakMessage.zkp)
  
  return zkp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YakMessage::set_allocated_zkp(::std::string* zkp) {
  if (zkp != NULL) {
    
  } else {
    
  }
  zkp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zkp);
  // @@protoc_insertion_point(field_set_allocated:mpc.yak.YakMessage.zkp)
}

// optional bytes pk = 3;
void YakMessage::clear_pk() {
  pk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& YakMessage::pk() const {
  // @@protoc_insertion_point(field_get:mpc.yak.YakMessage.pk)
  return pk_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YakMessage::set_pk(const ::std::string& value) {
  
  pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpc.yak.YakMessage.pk)
}
 void YakMessage::set_pk(const char* value) {
  
  pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpc.yak.YakMessage.pk)
}
 void YakMessage::set_pk(const void* value, size_t size) {
  
  pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpc.yak.YakMessage.pk)
}
 ::std::string* YakMessage::mutable_pk() {
  
  // @@protoc_insertion_point(field_mutable:mpc.yak.YakMessage.pk)
  return pk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YakMessage::release_pk() {
  // @@protoc_insertion_point(field_release:mpc.yak.YakMessage.pk)
  
  return pk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YakMessage::set_allocated_pk(::std::string* pk) {
  if (pk != NULL) {
    
  } else {
    
  }
  pk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pk);
  // @@protoc_insertion_point(field_set_allocated:mpc.yak.YakMessage.pk)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace yak
}  // namespace mpc

// @@protoc_insertion_point(global_scope)
