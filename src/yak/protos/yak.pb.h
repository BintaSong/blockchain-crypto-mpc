// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yak.proto

#ifndef PROTOBUF_yak_2eproto__INCLUDED
#define PROTOBUF_yak_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mpc {
namespace yak {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_yak_2eproto();
void protobuf_AssignDesc_yak_2eproto();
void protobuf_ShutdownFile_yak_2eproto();

class YakMessage;

// ===================================================================

class YakMessage : public ::google::protobuf::Message {
 public:
  YakMessage();
  virtual ~YakMessage();

  YakMessage(const YakMessage& from);

  inline YakMessage& operator=(const YakMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YakMessage& default_instance();

  void Swap(YakMessage* other);

  // implements Message ----------------------------------------------

  inline YakMessage* New() const { return New(NULL); }

  YakMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YakMessage& from);
  void MergeFrom(const YakMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YakMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes e = 1;
  void clear_e();
  static const int kEFieldNumber = 1;
  const ::std::string& e() const;
  void set_e(const ::std::string& value);
  void set_e(const char* value);
  void set_e(const void* value, size_t size);
  ::std::string* mutable_e();
  ::std::string* release_e();
  void set_allocated_e(::std::string* e);

  // optional bytes zkp = 2;
  void clear_zkp();
  static const int kZkpFieldNumber = 2;
  const ::std::string& zkp() const;
  void set_zkp(const ::std::string& value);
  void set_zkp(const char* value);
  void set_zkp(const void* value, size_t size);
  ::std::string* mutable_zkp();
  ::std::string* release_zkp();
  void set_allocated_zkp(::std::string* zkp);

  // optional bytes pk = 3;
  void clear_pk();
  static const int kPkFieldNumber = 3;
  const ::std::string& pk() const;
  void set_pk(const ::std::string& value);
  void set_pk(const char* value);
  void set_pk(const void* value, size_t size);
  ::std::string* mutable_pk();
  ::std::string* release_pk();
  void set_allocated_pk(::std::string* pk);

  // @@protoc_insertion_point(class_scope:mpc.yak.YakMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr e_;
  ::google::protobuf::internal::ArenaStringPtr zkp_;
  ::google::protobuf::internal::ArenaStringPtr pk_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_yak_2eproto();
  friend void protobuf_AssignDesc_yak_2eproto();
  friend void protobuf_ShutdownFile_yak_2eproto();

  void InitAsDefaultInstance();
  static YakMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// YakMessage

// optional bytes e = 1;
inline void YakMessage::clear_e() {
  e_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& YakMessage::e() const {
  // @@protoc_insertion_point(field_get:mpc.yak.YakMessage.e)
  return e_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YakMessage::set_e(const ::std::string& value) {
  
  e_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpc.yak.YakMessage.e)
}
inline void YakMessage::set_e(const char* value) {
  
  e_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpc.yak.YakMessage.e)
}
inline void YakMessage::set_e(const void* value, size_t size) {
  
  e_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpc.yak.YakMessage.e)
}
inline ::std::string* YakMessage::mutable_e() {
  
  // @@protoc_insertion_point(field_mutable:mpc.yak.YakMessage.e)
  return e_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YakMessage::release_e() {
  // @@protoc_insertion_point(field_release:mpc.yak.YakMessage.e)
  
  return e_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YakMessage::set_allocated_e(::std::string* e) {
  if (e != NULL) {
    
  } else {
    
  }
  e_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), e);
  // @@protoc_insertion_point(field_set_allocated:mpc.yak.YakMessage.e)
}

// optional bytes zkp = 2;
inline void YakMessage::clear_zkp() {
  zkp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& YakMessage::zkp() const {
  // @@protoc_insertion_point(field_get:mpc.yak.YakMessage.zkp)
  return zkp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YakMessage::set_zkp(const ::std::string& value) {
  
  zkp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpc.yak.YakMessage.zkp)
}
inline void YakMessage::set_zkp(const char* value) {
  
  zkp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpc.yak.YakMessage.zkp)
}
inline void YakMessage::set_zkp(const void* value, size_t size) {
  
  zkp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpc.yak.YakMessage.zkp)
}
inline ::std::string* YakMessage::mutable_zkp() {
  
  // @@protoc_insertion_point(field_mutable:mpc.yak.YakMessage.zkp)
  return zkp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YakMessage::release_zkp() {
  // @@protoc_insertion_point(field_release:mpc.yak.YakMessage.zkp)
  
  return zkp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YakMessage::set_allocated_zkp(::std::string* zkp) {
  if (zkp != NULL) {
    
  } else {
    
  }
  zkp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zkp);
  // @@protoc_insertion_point(field_set_allocated:mpc.yak.YakMessage.zkp)
}

// optional bytes pk = 3;
inline void YakMessage::clear_pk() {
  pk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& YakMessage::pk() const {
  // @@protoc_insertion_point(field_get:mpc.yak.YakMessage.pk)
  return pk_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YakMessage::set_pk(const ::std::string& value) {
  
  pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpc.yak.YakMessage.pk)
}
inline void YakMessage::set_pk(const char* value) {
  
  pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpc.yak.YakMessage.pk)
}
inline void YakMessage::set_pk(const void* value, size_t size) {
  
  pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpc.yak.YakMessage.pk)
}
inline ::std::string* YakMessage::mutable_pk() {
  
  // @@protoc_insertion_point(field_mutable:mpc.yak.YakMessage.pk)
  return pk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YakMessage::release_pk() {
  // @@protoc_insertion_point(field_release:mpc.yak.YakMessage.pk)
  
  return pk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YakMessage::set_allocated_pk(::std::string* pk) {
  if (pk != NULL) {
    
  } else {
    
  }
  pk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pk);
  // @@protoc_insertion_point(field_set_allocated:mpc.yak.YakMessage.pk)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace yak
}  // namespace mpc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_yak_2eproto__INCLUDED
