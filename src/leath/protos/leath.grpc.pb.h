// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: leath.proto
#ifndef GRPC_leath_2eproto__INCLUDED
#define GRPC_leath_2eproto__INCLUDED

#include "leath.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace mpc {
namespace leath {

class LeathRPC GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Setup
    virtual ::grpc::Status setup(::grpc::ClientContext* context, const ::mpc::leath::SetupMessage& request, ::mpc::leath::SetupMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mpc::leath::SetupMessage>> Asyncsetup(::grpc::ClientContext* context, const ::mpc::leath::SetupMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mpc::leath::SetupMessage>>(AsyncsetupRaw(context, request, cq));
    }
    // Share
    virtual ::grpc::Status share(::grpc::ClientContext* context, const ::mpc::leath::ShareRequestMessage& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncshare(::grpc::ClientContext* context, const ::mpc::leath::ShareRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncshareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::mpc::leath::ShareRequestMessage>> batch_share(::grpc::ClientContext* context, ::mpc::leath::batchShareReply* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::mpc::leath::ShareRequestMessage>>(batch_shareRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::mpc::leath::ShareRequestMessage>> Asyncbatch_share(::grpc::ClientContext* context, ::mpc::leath::batchShareReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::mpc::leath::ShareRequestMessage>>(Asyncbatch_shareRaw(context, response, cq, tag));
    }
    // Update
    virtual ::grpc::Status reconstruct(::grpc::ClientContext* context, const ::mpc::leath::ReconstructRequestMessage& request, ::mpc::leath::ReconstructReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mpc::leath::ReconstructReply>> Asyncreconstruct(::grpc::ClientContext* context, const ::mpc::leath::ReconstructRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mpc::leath::ReconstructReply>>(AsyncreconstructRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::mpc::leath::ReconstructRequestMessage, ::mpc::leath::ReconstructReply>> batch_reconstruct(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::mpc::leath::ReconstructRequestMessage, ::mpc::leath::ReconstructReply>>(batch_reconstructRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::mpc::leath::ReconstructRequestMessage, ::mpc::leath::ReconstructReply>> Asyncbatch_reconstruct(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::mpc::leath::ReconstructRequestMessage, ::mpc::leath::ReconstructReply>>(Asyncbatch_reconstructRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mpc::leath::ReconstructReply>> bulk_reconstruct(::grpc::ClientContext* context, const ::mpc::leath::ReconstructRangeMessage& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mpc::leath::ReconstructReply>>(bulk_reconstructRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mpc::leath::ReconstructReply>> Asyncbulk_reconstruct(::grpc::ClientContext* context, const ::mpc::leath::ReconstructRangeMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mpc::leath::ReconstructReply>>(Asyncbulk_reconstructRaw(context, request, cq, tag));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mpc::leath::SetupMessage>* AsyncsetupRaw(::grpc::ClientContext* context, const ::mpc::leath::SetupMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncshareRaw(::grpc::ClientContext* context, const ::mpc::leath::ShareRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::mpc::leath::ShareRequestMessage>* batch_shareRaw(::grpc::ClientContext* context, ::mpc::leath::batchShareReply* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::mpc::leath::ShareRequestMessage>* Asyncbatch_shareRaw(::grpc::ClientContext* context, ::mpc::leath::batchShareReply* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mpc::leath::ReconstructReply>* AsyncreconstructRaw(::grpc::ClientContext* context, const ::mpc::leath::ReconstructRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::mpc::leath::ReconstructRequestMessage, ::mpc::leath::ReconstructReply>* batch_reconstructRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::mpc::leath::ReconstructRequestMessage, ::mpc::leath::ReconstructReply>* Asyncbatch_reconstructRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::mpc::leath::ReconstructReply>* bulk_reconstructRaw(::grpc::ClientContext* context, const ::mpc::leath::ReconstructRangeMessage& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mpc::leath::ReconstructReply>* Asyncbulk_reconstructRaw(::grpc::ClientContext* context, const ::mpc::leath::ReconstructRangeMessage& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status setup(::grpc::ClientContext* context, const ::mpc::leath::SetupMessage& request, ::mpc::leath::SetupMessage* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mpc::leath::SetupMessage>> Asyncsetup(::grpc::ClientContext* context, const ::mpc::leath::SetupMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mpc::leath::SetupMessage>>(AsyncsetupRaw(context, request, cq));
    }
    ::grpc::Status share(::grpc::ClientContext* context, const ::mpc::leath::ShareRequestMessage& request, ::google::protobuf::Empty* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncshare(::grpc::ClientContext* context, const ::mpc::leath::ShareRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncshareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::mpc::leath::ShareRequestMessage>> batch_share(::grpc::ClientContext* context, ::mpc::leath::batchShareReply* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::mpc::leath::ShareRequestMessage>>(batch_shareRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::mpc::leath::ShareRequestMessage>> Asyncbatch_share(::grpc::ClientContext* context, ::mpc::leath::batchShareReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::mpc::leath::ShareRequestMessage>>(Asyncbatch_shareRaw(context, response, cq, tag));
    }
    ::grpc::Status reconstruct(::grpc::ClientContext* context, const ::mpc::leath::ReconstructRequestMessage& request, ::mpc::leath::ReconstructReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mpc::leath::ReconstructReply>> Asyncreconstruct(::grpc::ClientContext* context, const ::mpc::leath::ReconstructRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mpc::leath::ReconstructReply>>(AsyncreconstructRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::mpc::leath::ReconstructRequestMessage, ::mpc::leath::ReconstructReply>> batch_reconstruct(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::mpc::leath::ReconstructRequestMessage, ::mpc::leath::ReconstructReply>>(batch_reconstructRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::mpc::leath::ReconstructRequestMessage, ::mpc::leath::ReconstructReply>> Asyncbatch_reconstruct(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::mpc::leath::ReconstructRequestMessage, ::mpc::leath::ReconstructReply>>(Asyncbatch_reconstructRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mpc::leath::ReconstructReply>> bulk_reconstruct(::grpc::ClientContext* context, const ::mpc::leath::ReconstructRangeMessage& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mpc::leath::ReconstructReply>>(bulk_reconstructRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mpc::leath::ReconstructReply>> Asyncbulk_reconstruct(::grpc::ClientContext* context, const ::mpc::leath::ReconstructRangeMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mpc::leath::ReconstructReply>>(Asyncbulk_reconstructRaw(context, request, cq, tag));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::mpc::leath::SetupMessage>* AsyncsetupRaw(::grpc::ClientContext* context, const ::mpc::leath::SetupMessage& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncshareRaw(::grpc::ClientContext* context, const ::mpc::leath::ShareRequestMessage& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientWriter< ::mpc::leath::ShareRequestMessage>* batch_shareRaw(::grpc::ClientContext* context, ::mpc::leath::batchShareReply* response) GRPC_OVERRIDE;
    ::grpc::ClientAsyncWriter< ::mpc::leath::ShareRequestMessage>* Asyncbatch_shareRaw(::grpc::ClientContext* context, ::mpc::leath::batchShareReply* response, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::mpc::leath::ReconstructReply>* AsyncreconstructRaw(::grpc::ClientContext* context, const ::mpc::leath::ReconstructRequestMessage& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientReaderWriter< ::mpc::leath::ReconstructRequestMessage, ::mpc::leath::ReconstructReply>* batch_reconstructRaw(::grpc::ClientContext* context) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReaderWriter< ::mpc::leath::ReconstructRequestMessage, ::mpc::leath::ReconstructReply>* Asyncbatch_reconstructRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::mpc::leath::ReconstructReply>* bulk_reconstructRaw(::grpc::ClientContext* context, const ::mpc::leath::ReconstructRangeMessage& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::mpc::leath::ReconstructReply>* Asyncbulk_reconstructRaw(::grpc::ClientContext* context, const ::mpc::leath::ReconstructRangeMessage& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_setup_;
    const ::grpc::RpcMethod rpcmethod_share_;
    const ::grpc::RpcMethod rpcmethod_batch_share_;
    const ::grpc::RpcMethod rpcmethod_reconstruct_;
    const ::grpc::RpcMethod rpcmethod_batch_reconstruct_;
    const ::grpc::RpcMethod rpcmethod_bulk_reconstruct_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Setup
    virtual ::grpc::Status setup(::grpc::ServerContext* context, const ::mpc::leath::SetupMessage* request, ::mpc::leath::SetupMessage* response);
    // Share
    virtual ::grpc::Status share(::grpc::ServerContext* context, const ::mpc::leath::ShareRequestMessage* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status batch_share(::grpc::ServerContext* context, ::grpc::ServerReader< ::mpc::leath::ShareRequestMessage>* reader, ::mpc::leath::batchShareReply* response);
    // Update
    virtual ::grpc::Status reconstruct(::grpc::ServerContext* context, const ::mpc::leath::ReconstructRequestMessage* request, ::mpc::leath::ReconstructReply* response);
    virtual ::grpc::Status batch_reconstruct(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::mpc::leath::ReconstructReply, ::mpc::leath::ReconstructRequestMessage>* stream);
    virtual ::grpc::Status bulk_reconstruct(::grpc::ServerContext* context, const ::mpc::leath::ReconstructRangeMessage* request, ::grpc::ServerWriter< ::mpc::leath::ReconstructReply>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_setup() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_setup() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setup(::grpc::ServerContext* context, const ::mpc::leath::SetupMessage* request, ::mpc::leath::SetupMessage* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsetup(::grpc::ServerContext* context, ::mpc::leath::SetupMessage* request, ::grpc::ServerAsyncResponseWriter< ::mpc::leath::SetupMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_share : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_share() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_share() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status share(::grpc::ServerContext* context, const ::mpc::leath::ShareRequestMessage* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestshare(::grpc::ServerContext* context, ::mpc::leath::ShareRequestMessage* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_batch_share : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_batch_share() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_batch_share() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_share(::grpc::ServerContext* context, ::grpc::ServerReader< ::mpc::leath::ShareRequestMessage>* reader, ::mpc::leath::batchShareReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbatch_share(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::mpc::leath::batchShareReply, ::mpc::leath::ShareRequestMessage>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_reconstruct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_reconstruct() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_reconstruct() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reconstruct(::grpc::ServerContext* context, const ::mpc::leath::ReconstructRequestMessage* request, ::mpc::leath::ReconstructReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreconstruct(::grpc::ServerContext* context, ::mpc::leath::ReconstructRequestMessage* request, ::grpc::ServerAsyncResponseWriter< ::mpc::leath::ReconstructReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_batch_reconstruct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_batch_reconstruct() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_batch_reconstruct() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_reconstruct(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::mpc::leath::ReconstructReply, ::mpc::leath::ReconstructRequestMessage>* stream) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbatch_reconstruct(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::mpc::leath::ReconstructReply, ::mpc::leath::ReconstructRequestMessage>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_bulk_reconstruct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_bulk_reconstruct() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_bulk_reconstruct() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bulk_reconstruct(::grpc::ServerContext* context, const ::mpc::leath::ReconstructRangeMessage* request, ::grpc::ServerWriter< ::mpc::leath::ReconstructReply>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbulk_reconstruct(::grpc::ServerContext* context, ::mpc::leath::ReconstructRangeMessage* request, ::grpc::ServerAsyncWriter< ::mpc::leath::ReconstructReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_setup<WithAsyncMethod_share<WithAsyncMethod_batch_share<WithAsyncMethod_reconstruct<WithAsyncMethod_batch_reconstruct<WithAsyncMethod_bulk_reconstruct<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_setup() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_setup() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setup(::grpc::ServerContext* context, const ::mpc::leath::SetupMessage* request, ::mpc::leath::SetupMessage* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_share : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_share() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_share() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status share(::grpc::ServerContext* context, const ::mpc::leath::ShareRequestMessage* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_batch_share : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_batch_share() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_batch_share() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_share(::grpc::ServerContext* context, ::grpc::ServerReader< ::mpc::leath::ShareRequestMessage>* reader, ::mpc::leath::batchShareReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_reconstruct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_reconstruct() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_reconstruct() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reconstruct(::grpc::ServerContext* context, const ::mpc::leath::ReconstructRequestMessage* request, ::mpc::leath::ReconstructReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_batch_reconstruct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_batch_reconstruct() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_batch_reconstruct() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_reconstruct(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::mpc::leath::ReconstructReply, ::mpc::leath::ReconstructRequestMessage>* stream) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_bulk_reconstruct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_bulk_reconstruct() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_bulk_reconstruct() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bulk_reconstruct(::grpc::ServerContext* context, const ::mpc::leath::ReconstructRangeMessage* request, ::grpc::ServerWriter< ::mpc::leath::ReconstructReply>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace leath
}  // namespace mpc


#endif  // GRPC_leath_2eproto__INCLUDED
