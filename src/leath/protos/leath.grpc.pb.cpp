// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: leath.proto

#include "leath.pb.h"
#include "leath.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mpc {
namespace leath {

static const char* LeathRPC_method_names[] = {
  "/mpc.leath.LeathRPC/setup",
  "/mpc.leath.LeathRPC/share",
  "/mpc.leath.LeathRPC/batch_share",
  "/mpc.leath.LeathRPC/reconstruct",
  "/mpc.leath.LeathRPC/bulk_reconstruct",
};

std::unique_ptr< LeathRPC::Stub> LeathRPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LeathRPC::Stub> stub(new LeathRPC::Stub(channel));
  return stub;
}

LeathRPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_setup_(LeathRPC_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_share_(LeathRPC_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_batch_share_(LeathRPC_method_names[2], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_reconstruct_(LeathRPC_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_bulk_reconstruct_(LeathRPC_method_names[4], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status LeathRPC::Stub::setup(::grpc::ClientContext* context, const ::mpc::leath::SetupMessage& request, ::mpc::leath::SetupMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_setup_, context, request, response);
}

void LeathRPC::Stub::experimental_async::setup(::grpc::ClientContext* context, const ::mpc::leath::SetupMessage* request, ::mpc::leath::SetupMessage* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setup_, context, request, response, std::move(f));
}

void LeathRPC::Stub::experimental_async::setup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mpc::leath::SetupMessage* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setup_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mpc::leath::SetupMessage>* LeathRPC::Stub::AsyncsetupRaw(::grpc::ClientContext* context, const ::mpc::leath::SetupMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mpc::leath::SetupMessage>::Create(channel_.get(), cq, rpcmethod_setup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mpc::leath::SetupMessage>* LeathRPC::Stub::PrepareAsyncsetupRaw(::grpc::ClientContext* context, const ::mpc::leath::SetupMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mpc::leath::SetupMessage>::Create(channel_.get(), cq, rpcmethod_setup_, context, request, false);
}

::grpc::Status LeathRPC::Stub::share(::grpc::ClientContext* context, const ::mpc::leath::ShareRequestMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_share_, context, request, response);
}

void LeathRPC::Stub::experimental_async::share(::grpc::ClientContext* context, const ::mpc::leath::ShareRequestMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_share_, context, request, response, std::move(f));
}

void LeathRPC::Stub::experimental_async::share(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_share_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* LeathRPC::Stub::AsyncshareRaw(::grpc::ClientContext* context, const ::mpc::leath::ShareRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_share_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* LeathRPC::Stub::PrepareAsyncshareRaw(::grpc::ClientContext* context, const ::mpc::leath::ShareRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_share_, context, request, false);
}

::grpc::ClientWriter< ::mpc::leath::ShareRequestMessage>* LeathRPC::Stub::batch_shareRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response) {
  return ::grpc::internal::ClientWriterFactory< ::mpc::leath::ShareRequestMessage>::Create(channel_.get(), rpcmethod_batch_share_, context, response);
}

void LeathRPC::Stub::experimental_async::batch_share(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::experimental::ClientWriteReactor< ::mpc::leath::ShareRequestMessage>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::mpc::leath::ShareRequestMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_batch_share_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::mpc::leath::ShareRequestMessage>* LeathRPC::Stub::Asyncbatch_shareRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::mpc::leath::ShareRequestMessage>::Create(channel_.get(), cq, rpcmethod_batch_share_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::mpc::leath::ShareRequestMessage>* LeathRPC::Stub::PrepareAsyncbatch_shareRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::mpc::leath::ShareRequestMessage>::Create(channel_.get(), cq, rpcmethod_batch_share_, context, response, false, nullptr);
}

::grpc::Status LeathRPC::Stub::reconstruct(::grpc::ClientContext* context, const ::mpc::leath::ReconstructRequestMessage& request, ::mpc::leath::ReconstructReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_reconstruct_, context, request, response);
}

void LeathRPC::Stub::experimental_async::reconstruct(::grpc::ClientContext* context, const ::mpc::leath::ReconstructRequestMessage* request, ::mpc::leath::ReconstructReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_reconstruct_, context, request, response, std::move(f));
}

void LeathRPC::Stub::experimental_async::reconstruct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mpc::leath::ReconstructReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_reconstruct_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mpc::leath::ReconstructReply>* LeathRPC::Stub::AsyncreconstructRaw(::grpc::ClientContext* context, const ::mpc::leath::ReconstructRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mpc::leath::ReconstructReply>::Create(channel_.get(), cq, rpcmethod_reconstruct_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mpc::leath::ReconstructReply>* LeathRPC::Stub::PrepareAsyncreconstructRaw(::grpc::ClientContext* context, const ::mpc::leath::ReconstructRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mpc::leath::ReconstructReply>::Create(channel_.get(), cq, rpcmethod_reconstruct_, context, request, false);
}

::grpc::ClientReaderWriter< ::mpc::leath::ReconstructRequestMessage, ::mpc::leath::ReconstructReply>* LeathRPC::Stub::bulk_reconstructRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::mpc::leath::ReconstructRequestMessage, ::mpc::leath::ReconstructReply>::Create(channel_.get(), rpcmethod_bulk_reconstruct_, context);
}

void LeathRPC::Stub::experimental_async::bulk_reconstruct(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::mpc::leath::ReconstructRequestMessage,::mpc::leath::ReconstructReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::mpc::leath::ReconstructRequestMessage,::mpc::leath::ReconstructReply>::Create(stub_->channel_.get(), stub_->rpcmethod_bulk_reconstruct_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::mpc::leath::ReconstructRequestMessage, ::mpc::leath::ReconstructReply>* LeathRPC::Stub::Asyncbulk_reconstructRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::mpc::leath::ReconstructRequestMessage, ::mpc::leath::ReconstructReply>::Create(channel_.get(), cq, rpcmethod_bulk_reconstruct_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::mpc::leath::ReconstructRequestMessage, ::mpc::leath::ReconstructReply>* LeathRPC::Stub::PrepareAsyncbulk_reconstructRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::mpc::leath::ReconstructRequestMessage, ::mpc::leath::ReconstructReply>::Create(channel_.get(), cq, rpcmethod_bulk_reconstruct_, context, false, nullptr);
}

LeathRPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeathRPC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LeathRPC::Service, ::mpc::leath::SetupMessage, ::mpc::leath::SetupMessage>(
          std::mem_fn(&LeathRPC::Service::setup), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeathRPC_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LeathRPC::Service, ::mpc::leath::ShareRequestMessage, ::google::protobuf::Empty>(
          std::mem_fn(&LeathRPC::Service::share), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeathRPC_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< LeathRPC::Service, ::mpc::leath::ShareRequestMessage, ::google::protobuf::Empty>(
          std::mem_fn(&LeathRPC::Service::batch_share), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeathRPC_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LeathRPC::Service, ::mpc::leath::ReconstructRequestMessage, ::mpc::leath::ReconstructReply>(
          std::mem_fn(&LeathRPC::Service::reconstruct), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeathRPC_method_names[4],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< LeathRPC::Service, ::mpc::leath::ReconstructRequestMessage, ::mpc::leath::ReconstructReply>(
          std::mem_fn(&LeathRPC::Service::bulk_reconstruct), this)));
}

LeathRPC::Service::~Service() {
}

::grpc::Status LeathRPC::Service::setup(::grpc::ServerContext* context, const ::mpc::leath::SetupMessage* request, ::mpc::leath::SetupMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LeathRPC::Service::share(::grpc::ServerContext* context, const ::mpc::leath::ShareRequestMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LeathRPC::Service::batch_share(::grpc::ServerContext* context, ::grpc::ServerReader< ::mpc::leath::ShareRequestMessage>* reader, ::google::protobuf::Empty* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LeathRPC::Service::reconstruct(::grpc::ServerContext* context, const ::mpc::leath::ReconstructRequestMessage* request, ::mpc::leath::ReconstructReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LeathRPC::Service::bulk_reconstruct(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::mpc::leath::ReconstructReply, ::mpc::leath::ReconstructRequestMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mpc
}  // namespace leath

