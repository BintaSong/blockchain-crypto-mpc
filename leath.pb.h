// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: leath.proto

#ifndef PROTOBUF_leath_2eproto__INCLUDED
#define PROTOBUF_leath_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_leath_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSetupMessageImpl();
void InitDefaultsSetupMessage();
void InitDefaultsShareRequestMessageImpl();
void InitDefaultsShareRequestMessage();
void InitDefaultsSearchReplyImpl();
void InitDefaultsSearchReply();
void InitDefaultsReconstructRequestMessageImpl();
void InitDefaultsReconstructRequestMessage();
void InitDefaultsReconstructReplyImpl();
void InitDefaultsReconstructReply();
inline void InitDefaults() {
  InitDefaultsSetupMessage();
  InitDefaultsShareRequestMessage();
  InitDefaultsSearchReply();
  InitDefaultsReconstructRequestMessage();
  InitDefaultsReconstructReply();
}
}  // namespace protobuf_leath_2eproto
namespace mpc {
class ReconstructReply;
class ReconstructReplyDefaultTypeInternal;
extern ReconstructReplyDefaultTypeInternal _ReconstructReply_default_instance_;
class ReconstructRequestMessage;
class ReconstructRequestMessageDefaultTypeInternal;
extern ReconstructRequestMessageDefaultTypeInternal _ReconstructRequestMessage_default_instance_;
class SearchReply;
class SearchReplyDefaultTypeInternal;
extern SearchReplyDefaultTypeInternal _SearchReply_default_instance_;
class SetupMessage;
class SetupMessageDefaultTypeInternal;
extern SetupMessageDefaultTypeInternal _SetupMessage_default_instance_;
class ShareRequestMessage;
class ShareRequestMessageDefaultTypeInternal;
extern ShareRequestMessageDefaultTypeInternal _ShareRequestMessage_default_instance_;
}  // namespace mpc
namespace mpc {

// ===================================================================

class SetupMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpc.SetupMessage) */ {
 public:
  SetupMessage();
  virtual ~SetupMessage();

  SetupMessage(const SetupMessage& from);

  inline SetupMessage& operator=(const SetupMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetupMessage(SetupMessage&& from) noexcept
    : SetupMessage() {
    *this = ::std::move(from);
  }

  inline SetupMessage& operator=(SetupMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetupMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetupMessage* internal_default_instance() {
    return reinterpret_cast<const SetupMessage*>(
               &_SetupMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SetupMessage* other);
  friend void swap(SetupMessage& a, SetupMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetupMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  SetupMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetupMessage& from);
  void MergeFrom(const SetupMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetupMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // uint64 msg_id = 1;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  ::google::protobuf::uint64 msg_id() const;
  void set_msg_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:mpc.SetupMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::uint64 msg_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_leath_2eproto::TableStruct;
  friend void ::protobuf_leath_2eproto::InitDefaultsSetupMessageImpl();
};
// -------------------------------------------------------------------

class ShareRequestMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpc.ShareRequestMessage) */ {
 public:
  ShareRequestMessage();
  virtual ~ShareRequestMessage();

  ShareRequestMessage(const ShareRequestMessage& from);

  inline ShareRequestMessage& operator=(const ShareRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShareRequestMessage(ShareRequestMessage&& from) noexcept
    : ShareRequestMessage() {
    *this = ::std::move(from);
  }

  inline ShareRequestMessage& operator=(ShareRequestMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShareRequestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShareRequestMessage* internal_default_instance() {
    return reinterpret_cast<const ShareRequestMessage*>(
               &_ShareRequestMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ShareRequestMessage* other);
  friend void swap(ShareRequestMessage& a, ShareRequestMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShareRequestMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ShareRequestMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShareRequestMessage& from);
  void MergeFrom(const ShareRequestMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShareRequestMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value_share = 2;
  void clear_value_share();
  static const int kValueShareFieldNumber = 2;
  const ::std::string& value_share() const;
  void set_value_share(const ::std::string& value);
  #if LANG_CXX11
  void set_value_share(::std::string&& value);
  #endif
  void set_value_share(const char* value);
  void set_value_share(const void* value, size_t size);
  ::std::string* mutable_value_share();
  ::std::string* release_value_share();
  void set_allocated_value_share(::std::string* value_share);

  // bytes mac_share = 3;
  void clear_mac_share();
  static const int kMacShareFieldNumber = 3;
  const ::std::string& mac_share() const;
  void set_mac_share(const ::std::string& value);
  #if LANG_CXX11
  void set_mac_share(::std::string&& value);
  #endif
  void set_mac_share(const char* value);
  void set_mac_share(const void* value, size_t size);
  ::std::string* mutable_mac_share();
  ::std::string* release_mac_share();
  void set_allocated_mac_share(::std::string* mac_share);

  // uint64 value_id = 1;
  void clear_value_id();
  static const int kValueIdFieldNumber = 1;
  ::google::protobuf::uint64 value_id() const;
  void set_value_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:mpc.ShareRequestMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_share_;
  ::google::protobuf::internal::ArenaStringPtr mac_share_;
  ::google::protobuf::uint64 value_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_leath_2eproto::TableStruct;
  friend void ::protobuf_leath_2eproto::InitDefaultsShareRequestMessageImpl();
};
// -------------------------------------------------------------------

class SearchReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpc.SearchReply) */ {
 public:
  SearchReply();
  virtual ~SearchReply();

  SearchReply(const SearchReply& from);

  inline SearchReply& operator=(const SearchReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchReply(SearchReply&& from) noexcept
    : SearchReply() {
    *this = ::std::move(from);
  }

  inline SearchReply& operator=(SearchReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchReply* internal_default_instance() {
    return reinterpret_cast<const SearchReply*>(
               &_SearchReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SearchReply* other);
  friend void swap(SearchReply& a, SearchReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchReply* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchReply& from);
  void MergeFrom(const SearchReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const void* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:mpc.SearchReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  mutable int _cached_size_;
  friend struct ::protobuf_leath_2eproto::TableStruct;
  friend void ::protobuf_leath_2eproto::InitDefaultsSearchReplyImpl();
};
// -------------------------------------------------------------------

class ReconstructRequestMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpc.ReconstructRequestMessage) */ {
 public:
  ReconstructRequestMessage();
  virtual ~ReconstructRequestMessage();

  ReconstructRequestMessage(const ReconstructRequestMessage& from);

  inline ReconstructRequestMessage& operator=(const ReconstructRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReconstructRequestMessage(ReconstructRequestMessage&& from) noexcept
    : ReconstructRequestMessage() {
    *this = ::std::move(from);
  }

  inline ReconstructRequestMessage& operator=(ReconstructRequestMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReconstructRequestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReconstructRequestMessage* internal_default_instance() {
    return reinterpret_cast<const ReconstructRequestMessage*>(
               &_ReconstructRequestMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ReconstructRequestMessage* other);
  friend void swap(ReconstructRequestMessage& a, ReconstructRequestMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReconstructRequestMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ReconstructRequestMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReconstructRequestMessage& from);
  void MergeFrom(const ReconstructRequestMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReconstructRequestMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 value_id = 1;
  void clear_value_id();
  static const int kValueIdFieldNumber = 1;
  ::google::protobuf::uint64 value_id() const;
  void set_value_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:mpc.ReconstructRequestMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 value_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_leath_2eproto::TableStruct;
  friend void ::protobuf_leath_2eproto::InitDefaultsReconstructRequestMessageImpl();
};
// -------------------------------------------------------------------

class ReconstructReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpc.ReconstructReply) */ {
 public:
  ReconstructReply();
  virtual ~ReconstructReply();

  ReconstructReply(const ReconstructReply& from);

  inline ReconstructReply& operator=(const ReconstructReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReconstructReply(ReconstructReply&& from) noexcept
    : ReconstructReply() {
    *this = ::std::move(from);
  }

  inline ReconstructReply& operator=(ReconstructReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReconstructReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReconstructReply* internal_default_instance() {
    return reinterpret_cast<const ReconstructReply*>(
               &_ReconstructReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ReconstructReply* other);
  friend void swap(ReconstructReply& a, ReconstructReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReconstructReply* New() const PROTOBUF_FINAL { return New(NULL); }

  ReconstructReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReconstructReply& from);
  void MergeFrom(const ReconstructReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReconstructReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value_share = 2;
  void clear_value_share();
  static const int kValueShareFieldNumber = 2;
  const ::std::string& value_share() const;
  void set_value_share(const ::std::string& value);
  #if LANG_CXX11
  void set_value_share(::std::string&& value);
  #endif
  void set_value_share(const char* value);
  void set_value_share(const void* value, size_t size);
  ::std::string* mutable_value_share();
  ::std::string* release_value_share();
  void set_allocated_value_share(::std::string* value_share);

  // bytes mac_share = 3;
  void clear_mac_share();
  static const int kMacShareFieldNumber = 3;
  const ::std::string& mac_share() const;
  void set_mac_share(const ::std::string& value);
  #if LANG_CXX11
  void set_mac_share(::std::string&& value);
  #endif
  void set_mac_share(const char* value);
  void set_mac_share(const void* value, size_t size);
  ::std::string* mutable_mac_share();
  ::std::string* release_mac_share();
  void set_allocated_mac_share(::std::string* mac_share);

  // uint64 value_id = 1;
  void clear_value_id();
  static const int kValueIdFieldNumber = 1;
  ::google::protobuf::uint64 value_id() const;
  void set_value_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:mpc.ReconstructReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_share_;
  ::google::protobuf::internal::ArenaStringPtr mac_share_;
  ::google::protobuf::uint64 value_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_leath_2eproto::TableStruct;
  friend void ::protobuf_leath_2eproto::InitDefaultsReconstructReplyImpl();
};
// ===================================================================


// ===================================================================

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetupMessage

// uint64 msg_id = 1;
inline void SetupMessage::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SetupMessage::msg_id() const {
  // @@protoc_insertion_point(field_get:mpc.SetupMessage.msg_id)
  return msg_id_;
}
inline void SetupMessage::set_msg_id(::google::protobuf::uint64 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:mpc.SetupMessage.msg_id)
}

// bytes msg = 2;
inline void SetupMessage::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetupMessage::msg() const {
  // @@protoc_insertion_point(field_get:mpc.SetupMessage.msg)
  return msg_.GetNoArena();
}
inline void SetupMessage::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpc.SetupMessage.msg)
}
#if LANG_CXX11
inline void SetupMessage::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mpc.SetupMessage.msg)
}
#endif
inline void SetupMessage::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpc.SetupMessage.msg)
}
inline void SetupMessage::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpc.SetupMessage.msg)
}
inline ::std::string* SetupMessage::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:mpc.SetupMessage.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetupMessage::release_msg() {
  // @@protoc_insertion_point(field_release:mpc.SetupMessage.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetupMessage::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:mpc.SetupMessage.msg)
}

// -------------------------------------------------------------------

// ShareRequestMessage

// uint64 value_id = 1;
inline void ShareRequestMessage::clear_value_id() {
  value_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ShareRequestMessage::value_id() const {
  // @@protoc_insertion_point(field_get:mpc.ShareRequestMessage.value_id)
  return value_id_;
}
inline void ShareRequestMessage::set_value_id(::google::protobuf::uint64 value) {
  
  value_id_ = value;
  // @@protoc_insertion_point(field_set:mpc.ShareRequestMessage.value_id)
}

// bytes value_share = 2;
inline void ShareRequestMessage::clear_value_share() {
  value_share_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShareRequestMessage::value_share() const {
  // @@protoc_insertion_point(field_get:mpc.ShareRequestMessage.value_share)
  return value_share_.GetNoArena();
}
inline void ShareRequestMessage::set_value_share(const ::std::string& value) {
  
  value_share_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpc.ShareRequestMessage.value_share)
}
#if LANG_CXX11
inline void ShareRequestMessage::set_value_share(::std::string&& value) {
  
  value_share_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mpc.ShareRequestMessage.value_share)
}
#endif
inline void ShareRequestMessage::set_value_share(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_share_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpc.ShareRequestMessage.value_share)
}
inline void ShareRequestMessage::set_value_share(const void* value, size_t size) {
  
  value_share_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpc.ShareRequestMessage.value_share)
}
inline ::std::string* ShareRequestMessage::mutable_value_share() {
  
  // @@protoc_insertion_point(field_mutable:mpc.ShareRequestMessage.value_share)
  return value_share_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShareRequestMessage::release_value_share() {
  // @@protoc_insertion_point(field_release:mpc.ShareRequestMessage.value_share)
  
  return value_share_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShareRequestMessage::set_allocated_value_share(::std::string* value_share) {
  if (value_share != NULL) {
    
  } else {
    
  }
  value_share_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value_share);
  // @@protoc_insertion_point(field_set_allocated:mpc.ShareRequestMessage.value_share)
}

// bytes mac_share = 3;
inline void ShareRequestMessage::clear_mac_share() {
  mac_share_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShareRequestMessage::mac_share() const {
  // @@protoc_insertion_point(field_get:mpc.ShareRequestMessage.mac_share)
  return mac_share_.GetNoArena();
}
inline void ShareRequestMessage::set_mac_share(const ::std::string& value) {
  
  mac_share_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpc.ShareRequestMessage.mac_share)
}
#if LANG_CXX11
inline void ShareRequestMessage::set_mac_share(::std::string&& value) {
  
  mac_share_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mpc.ShareRequestMessage.mac_share)
}
#endif
inline void ShareRequestMessage::set_mac_share(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_share_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpc.ShareRequestMessage.mac_share)
}
inline void ShareRequestMessage::set_mac_share(const void* value, size_t size) {
  
  mac_share_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpc.ShareRequestMessage.mac_share)
}
inline ::std::string* ShareRequestMessage::mutable_mac_share() {
  
  // @@protoc_insertion_point(field_mutable:mpc.ShareRequestMessage.mac_share)
  return mac_share_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShareRequestMessage::release_mac_share() {
  // @@protoc_insertion_point(field_release:mpc.ShareRequestMessage.mac_share)
  
  return mac_share_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShareRequestMessage::set_allocated_mac_share(::std::string* mac_share) {
  if (mac_share != NULL) {
    
  } else {
    
  }
  mac_share_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_share);
  // @@protoc_insertion_point(field_set_allocated:mpc.ShareRequestMessage.mac_share)
}

// -------------------------------------------------------------------

// SearchReply

// bytes result = 1;
inline void SearchReply::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchReply::result() const {
  // @@protoc_insertion_point(field_get:mpc.SearchReply.result)
  return result_.GetNoArena();
}
inline void SearchReply::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpc.SearchReply.result)
}
#if LANG_CXX11
inline void SearchReply::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mpc.SearchReply.result)
}
#endif
inline void SearchReply::set_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpc.SearchReply.result)
}
inline void SearchReply::set_result(const void* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpc.SearchReply.result)
}
inline ::std::string* SearchReply::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:mpc.SearchReply.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchReply::release_result() {
  // @@protoc_insertion_point(field_release:mpc.SearchReply.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchReply::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:mpc.SearchReply.result)
}

// -------------------------------------------------------------------

// ReconstructRequestMessage

// uint64 value_id = 1;
inline void ReconstructRequestMessage::clear_value_id() {
  value_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReconstructRequestMessage::value_id() const {
  // @@protoc_insertion_point(field_get:mpc.ReconstructRequestMessage.value_id)
  return value_id_;
}
inline void ReconstructRequestMessage::set_value_id(::google::protobuf::uint64 value) {
  
  value_id_ = value;
  // @@protoc_insertion_point(field_set:mpc.ReconstructRequestMessage.value_id)
}

// -------------------------------------------------------------------

// ReconstructReply

// uint64 value_id = 1;
inline void ReconstructReply::clear_value_id() {
  value_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReconstructReply::value_id() const {
  // @@protoc_insertion_point(field_get:mpc.ReconstructReply.value_id)
  return value_id_;
}
inline void ReconstructReply::set_value_id(::google::protobuf::uint64 value) {
  
  value_id_ = value;
  // @@protoc_insertion_point(field_set:mpc.ReconstructReply.value_id)
}

// bytes value_share = 2;
inline void ReconstructReply::clear_value_share() {
  value_share_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReconstructReply::value_share() const {
  // @@protoc_insertion_point(field_get:mpc.ReconstructReply.value_share)
  return value_share_.GetNoArena();
}
inline void ReconstructReply::set_value_share(const ::std::string& value) {
  
  value_share_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpc.ReconstructReply.value_share)
}
#if LANG_CXX11
inline void ReconstructReply::set_value_share(::std::string&& value) {
  
  value_share_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mpc.ReconstructReply.value_share)
}
#endif
inline void ReconstructReply::set_value_share(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_share_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpc.ReconstructReply.value_share)
}
inline void ReconstructReply::set_value_share(const void* value, size_t size) {
  
  value_share_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpc.ReconstructReply.value_share)
}
inline ::std::string* ReconstructReply::mutable_value_share() {
  
  // @@protoc_insertion_point(field_mutable:mpc.ReconstructReply.value_share)
  return value_share_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReconstructReply::release_value_share() {
  // @@protoc_insertion_point(field_release:mpc.ReconstructReply.value_share)
  
  return value_share_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReconstructReply::set_allocated_value_share(::std::string* value_share) {
  if (value_share != NULL) {
    
  } else {
    
  }
  value_share_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value_share);
  // @@protoc_insertion_point(field_set_allocated:mpc.ReconstructReply.value_share)
}

// bytes mac_share = 3;
inline void ReconstructReply::clear_mac_share() {
  mac_share_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReconstructReply::mac_share() const {
  // @@protoc_insertion_point(field_get:mpc.ReconstructReply.mac_share)
  return mac_share_.GetNoArena();
}
inline void ReconstructReply::set_mac_share(const ::std::string& value) {
  
  mac_share_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpc.ReconstructReply.mac_share)
}
#if LANG_CXX11
inline void ReconstructReply::set_mac_share(::std::string&& value) {
  
  mac_share_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mpc.ReconstructReply.mac_share)
}
#endif
inline void ReconstructReply::set_mac_share(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_share_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpc.ReconstructReply.mac_share)
}
inline void ReconstructReply::set_mac_share(const void* value, size_t size) {
  
  mac_share_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpc.ReconstructReply.mac_share)
}
inline ::std::string* ReconstructReply::mutable_mac_share() {
  
  // @@protoc_insertion_point(field_mutable:mpc.ReconstructReply.mac_share)
  return mac_share_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReconstructReply::release_mac_share() {
  // @@protoc_insertion_point(field_release:mpc.ReconstructReply.mac_share)
  
  return mac_share_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReconstructReply::set_allocated_mac_share(::std::string* mac_share) {
  if (mac_share != NULL) {
    
  } else {
    
  }
  mac_share_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_share);
  // @@protoc_insertion_point(field_set_allocated:mpc.ReconstructReply.mac_share)
}

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mpc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_leath_2eproto__INCLUDED
